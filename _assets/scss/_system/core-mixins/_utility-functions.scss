/* stylelint-disable */

@function leading($font-size, $computed) {
	$fs: strip-units($font-size);
	@return $computed / $fs;
}

@function strip-units($value) {
	@return $value / ($value * 0 + 1);
}

@function gutter($lines: 1, $gutter: $base-padding) {
	@if length($lines)==1 {
		@return rem(floor(($gutter * $lines) * 1px));
	}
	@else if length($lines) < 5 {
		$string: '';
		@for $i from 1 through length($lines) {
			$string: $string + ' ' + floor(($gutter * nth($lines, $i)) * 1px);
		}
		@return rem(unquote($string));
	}
	@else {
		@warn 'To many values used in gutter function';
		@return null;
	}
}

@function gridCalc($columns, $total-columns: $base-max-columns) {
	@return percentage($columns / $total-columns);
}

// colour functions
// Add percentage of white to a color
@function tint($color, $percent) {
	@return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent) {
	@return mix(black, $color, $percent);
}

@function c($palette, $tone: 'base') {
	@return map-get(map-get($palettes, $palette), $tone);
}

@function breakpoint($break) {
	@return map-get($breakpoints, $break);
}

@function rem($size, $base: $browser-default-font-size) {
	$remSize: $size / $base;
	@return #{$remSize}rem;
}


@mixin svg($sprite) {
	$map: map-get($sprites, $sprite);
	background: url('../images/svg-sprite.svg') map-get($map, backgroundX) map-get($map, backgroundY) no-repeat;
	width: map-get($map, width);
	height: map-get($map, height);
}

@function ratio($x: 16, $y: 9) {
	@return percentage($y / $x);
}

@mixin t-html() {
	font-size: $min-font;

	@include mq($min-width) {
		font-size: calc( #{$min-font} + (#{strip-units($max-font)} - #{strip-units($min-font)}) * ((100vw - #{$min-width}) / (#{strip-units($max-width)} - #{strip-units($min-width)})) );
	}

	@include mq($max-width) {
		font-size: $max-font;
	}
}


@mixin size($min: $min-font, $max: $max-font, $line-height: false) {
	font-size: (($min * 1px) / $min-font) + rem;

	@if(type-of($line-height) == number or $line-height == true) {
		line-height:  ($line-height / $max);
	} @else {
		line-height:  $line-height-ratio;
	}

	@if strip-units($max) != strip-units($min) {
		@include mq($from: $min-width) {
			font-size: calc( #{strip-units($min)}px + (#{strip-units($max)} - #{strip-units($min)}) * ((100vw - #{$min-width}) / (#{strip-units($max-width)} - #{strip-units($min-width)})) );
		}
	}

	@include mq($max-width) {
		font-size: (($max * 1px) / $max-font) + rem;
	}
}
