@function computeLineHeight($font-size, $computed) {
  $fs: strip-units($font-size);
  @return $computed / $fs;
}

@function strip-units($value) {
	@return $value / ($value * 0 + 1);
}

@function gutter($lines: 1, $gutter: $base-padding) {
  @if length($lines) == 1 {
    @return floor(($gutter * $lines) * 1px);
  } @else if length($lines) < 5{
    $string: '';
    @for $i from 1 through length($lines) {
      $string: $string + ' ' + floor(($gutter * nth($lines, $i)) * 1px);
    }
    @return unquote($string);
  } @else {
    @warn 'To many values used in gutter function';
    @return null;
  }
}

@function gridCalc($columns,$total-columns: $base-max-columns) {
	@return percentage($columns / $total-columns);
}


// colour functions
// Add percentage of white to a color
@function tint($color, $percent){
 	@return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent){
 	@return mix(black, $color, $percent);
}

// http://erskinedesign.com/blog/friendlier-colour-names-sass-maps/
// use eg palette(accent,light)
@function palette($palette, $tone: 'base') {
    @return map-get(map-get($palettes, $palette), $tone);
}

@function c($palette, $tone: 'base') {
    @return map-get(map-get($palettes, $palette), $tone);
}

@function breakpoint($break) {
	@return map-get($breakpoints, $break);
}


@function rem($size, $base: $browser-default-font-size) {
  $remSize: $size / $base;
  @return #{$remSize}rem;
}

@mixin type-reveal($selector: ".site") {
  #{unquote($selector)} {
    transition: opacity .4s;
    opacity: 0;
    .wf-active &,
    .wf-fail &,
    .wf-inactive & {
      opacity: 1;
    }
  }

  .no-js {
    #{unquote($selector)} {
      opacity: 1;
    }
  }
}

@function font($type: default) {
    @return map-get($fonts, $type);
}

// font-size  -
// see http://codepen.io/chriscoyier/pen/gsodI for usage example
// - does not require a height, although a height can be used

@mixin font-size($font-size, $line-height: true) {
  @if $debug == true {
    font-size: $font-size * 1px;
  } @else {
    font-size: ($font-size / $base-font-size) * 1rem;
  }

  @if $line-height == true {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }


  @elseif $line-height != false {
    @if type-of($line-height) == number {
      @if unitless($line-height) {
        line-height: computeLineHeight($font-size, $line-height);
      }
    }
  }
}

@mixin line-height($font-size, $line-height: true) {
  @if $line-height == true {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  }
  @if unitless($line-height) {
    line-height: computeLineHeight($font-size, $line-height);
  }
}

@mixin font-baseline($font-size: $base-font-size, $line-height:  $base-line-height, $default:$browser-default-font-size) {
  font-size: $base-font-size / $browser-default-font-size + em;
  line-height: $base-line-height / $base-font-size; /* [2] */
}


@mixin baseline($baseline: $magic-number) {
  html {
    $size: strip-units($baseline);
    background-image: url(http://basehold.it/i/#{$size});
  }
}
