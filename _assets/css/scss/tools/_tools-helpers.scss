@mixin placeholder(){
  ::-webkit-input-placeholder {
     @content;
  }

  :-moz-placeholder { /* Firefox 18- */
     @content;
  }

  ::-moz-placeholder {  /* Firefox 19+ */
     @content;
  }

  :-ms-input-placeholder {
     @content;
  }
}

// reset radio/checkbox
@mixin reset-input() {
  opacity: 0;
  width: 0;
  height: 0;
  float: left; // take out of the flow
}

// call on the input (radio/checkbox)
@mixin fancy-input($position: before) {

	// hide the default radio input
	// opacity: 0;
	// create a radio button style using the
	& + label:#{$position} {
		content: " ";
		@content;
	}
}

// call on the input (radio/checkbox) for the checked state
@mixin fancy-input-checked($target: before) {

	&:checked + label:before {
		@content;
	}
}


// example
// - @include mq('min', '40px') {stuff:here}
// debug option - this can only be used when mixin is declared at the root
// until libsass supports @at-root{}
@mixin mq($bp: 320, $type: min, $orientation: null, $property: width, $debug: false, $inc-ie: true) {
  $min: null;
  $max: null;
  $break: null;


  // ouput in media query for non ie css

    @if type-of($bp) == list {
        $min: nth($bp,1) * 1px;
        $max: nth($bp,2) * 1px;
        @if $orientation == null {
          @media only screen and (min-#{$property}: $min) and (max-#{$property}: $max) {
            @content;


            // debugger
            @if $debug == true {
              @include mq-debug($bp,$type,$orientation,$property);
            }


          }
        } @else {
          @media only screen and (min-#{$property}: $min) and (max-#{$property}: $max) and (orientation : $orientation) {
            @content;


            // debugger
            @if $debug == true {
              @include mq-debug($bp,$type,$orientation,$property);
            }


          }
        }
    } @else {
      $break: $bp * 1px;
      @if $orientation == null {
        @media only screen and (#{$type}-#{$property}: $break) {
          @content;


            // debugger
            @if $debug == true {
              @include mq-debug($bp,$type,$orientation,$property);
            }


        }

      } @else {
        @media only screen and (#{$type}-#{$property}: $break) and (orientation : $orientation) {
          @content;
            // debugger
            @if $debug == true {
              @include mq-debug($bp,$type,$orientation,$property);
            }
        }
      }
    }

}

@mixin mq-debug($bp: null, $type: null, $orientation: null, $property: null) {
    body {
      &:after {
          @include position(fixed, null null 0 0);
          color: $white;
          padding: 5px;
          font-size: 12px;
          content: " ";
          display: block;
          z-index: 100;
          background-color: rgba(0,0,0,0.8);
          content: '#{$bp} #{$type} #{$orientation} #{$property}';
      }
    }

}



// example
// - @include mq(340px 679px) {stuff:here}
@mixin between($bps) {
  $min: nth($bps,1);
  $max: nth($bps,2);
  $string: 'only screen and ';
  $output: $string + '(min-width:#{$min})' + ' and '+ '(max-width:#{$max})';
  @media #{$output} {
    @content;
  }
}

// taken from
// https://github.com/at-import/toolkit/blob/2.x.x/stylesheets/toolkit/_triangle.scss
@mixin triangle($color: null, $height: null, $width: null, $angle: null) {

  @if nth($angle, 1) == "top" or nth($angle, 1) == "bottom" {
    $angle: "#{$angle}";
  }

  @if $angle == "top" {
    $angle: 0;
  }
  @if $angle == "top right" {
    $angle: 45 * 7;
  }
  @if $angle == "right" {
    $angle: 45 * 2;
  }
  @if $angle == "bottom right" {
    $angle: 45 * 1;
  }
  @if $angle == "bottom" {
    $angle: 45 * 4;
  }
  @if $angle == "bottom left" {
    $angle: 45 * 3;
  }
  @if $angle == "left" {
    $angle: 45 * 6;
  }
  @if $angle == "top left" {
    $angle: 45 * 5;
  }
  //
  // @if unit($height) == "" or unit($height) == "%" {
  //   @debug "in triangle #{$height} is not a compatible unit for height."
  // }

  // @if unit($width) == "" or unit($width) == "%" {
  //   @debug "in triangle #{$width} is not a compatible unit for width."
  // }

  // offset 45deg to make each side start at 0
  $deg: $angle + 45;
  // if units, remove units
  @if unit($deg) == deg {
    $deg: $deg / 1deg;
  }
  // shift to be on a scale from 0 to 90.
  @while $deg > 90 {
    $deg: $deg - 90;
  }
  @while $deg < 0 {
    $deg: $deg + 90;
  }
  // Get a ratio of 90 to multiply by.
  $deg: $deg / 90;

  // make sure metrics are reset
  display: block;
  width: 0;
  height: 0;
  border: 0 solid transparent;

  // run through sides
  @if $angle <= 45 or $angle > 315 {
    border-bottom-color: $color;
    border-width: 0 ($width * abs($deg - 1)) $height ($width * $deg);
  }
  @if $angle > 45 and $angle <= 135 {
    border-left-color: $color;
    border-width: ($height * $deg) 0 ($height * abs($deg - 1)) $width;
  }
  @if $angle > 135 and $angle <= 225 {
    border-top-color: $color;
    border-width: $height ($width * $deg) 0 ($width * abs($deg - 1));
  }
  @if $angle > 225 and $angle <= 315 {
    border-right-color: $color;
    border-width: ($height * abs($deg - 1)) $width ($height * $deg) 0;
  }
}

// gradient underlines

// <div>
//   <span class="underline" style="display: inline;">bla bla</span>
// </div>

@mixin underline($color, $line-height: 1rem, $bg: transparent, $weight: 1px) {
    @include background-image(linear-gradient(to bottom,($bg 50%, palette(themes,us) 50%)));
    background-repeat: repeat-x;
    background-position: 0 $line-height;
    background-size: $weight $weight;
}




@mixin debugger($psuedo: false, $color: red) {
  outline: 1px dotted $color;
  @if $psuedo == true {
    &:before,
    &:after {
      outline: 1px dotted darken($color,10%);
    }
  }
}


@mixin selection($current-selector: false) {
  @if $current-selector {
    &::-moz-selection {
      @content;
    }

    &::selection {
      @content;
    }
  } @else {
    ::-moz-selection {
      @content;
    }

    ::selection {
      @content;
    }
  }
}

// ----
// Sass (v3.4.7)
// Compass (v1.0.1)
// ----

 // thanks to @ericmsuzanne for this function
@function map-set($map, $key, $value) {
  $new: ($key: $value);
  @return map-merge($map, $new);
}

// Introducing Map-Extends
// Cross media query extends using maps
// 1. Create an map, with a name key.
// 2. Add your css as per normal, just with commas instead of semi colons
//  $menu-object: (
//    name: menu-object,
//    list-style: none,
//    margin: 0
//  );
// 3. Nesting is not possible, well, it could be done but I'm not sure that it's worth it
// 4. Call the mixin by passing in the name of the object you wish to use, and the current breakpoint name
//    eg. core, mob, desktop, et al
//
//  The first time the obj mixin is called a %placeholder class is created and immediately extended
//  The next time the obj mixin is called, the %placeholder class is used
//
//
// USAGE
//
//  .menu {
//    @include obj($menu-object, 'core');
//  }
//  .sub-menu {
//    @include obj($menu-object, 'core');
//  }
// called from within the desktop breakpoint file
//  .side-menu {
//    @include obj($menu-object, 'desktop');
//  }
//  .another-menu {
//    @include obj($menu-object, 'desktop');
//  }
//
// OUTPUT
//
//  .menu, .sub-menu {
//    list-style: none;
//    margin: 0;
//  }
//  @media screen and (min-width: 954px) {
//    .side-menu, .another-menu {
//      list-style: none;
//      margin: 0;
//    }
//  }

// init extend map, this map will keep a record of all of the extend objects created
$extend : ();

@mixin obj($map, $bp: $current_breakpoint) {


  // if we're passing in a map
  @if type-of($map) == map {
    // init name variable
    $name: null;
    // loop through the map values
    @each $j in $map {
      // if the key is name
      @if nth($j,1) == name {
        // update the name value
        $name: map-get($map, name);
      }
    }
    // set the placeholder
    $placeholder: #{$name}-#{$bp};
    @if map-has-key($extend, $placeholder) {
        // map exists so extend it
        @extend %#{$placeholder};
        // call placeholder class
    } @else {
      // add the name to the extends object
      // the next time the mixin is called with the same object
      // the placeholder class will not need to be generated
      $extend: map-set($extend, $placeholder, true) !global;
      // create placeholder class
      // jump to the root context
      @at-root {
        // create the placeholer class
        %#{$placeholder} {
          // loop through the map values,
          @each $i in $map {
            // nth(1) == property
            $a: nth($i,1);
            // nt(2) == value
            $b: nth($i,2);
            @if $a != name {
              #{$a}: #{$b};
            }
          }
        }
      }
      // now we can call out placeholder
      @extend %#{$placeholder};
    }
  }

  @else {
    @warn "the first argument must be a map";
  }
}





// yup