/* stylelint-disable */
@function leading($font-size, $computed) {
	$fs: strip-units($font-size);
	@return $computed / $fs;
}

@function font($font: default) {
	@return map-get(map-get($fonts, $font), 'font-family');
}

@function weight($font: default) {
	@return map-get(map-get($fonts, $font), 'weight');
}

@function calcfluid($min-type-size, $max-type-size, $start-fluid-width: $start-fluid-width, $stop-fluid-width: $stop-fluid-width) {
	@return calc( #{$min-type-size} + (#{strip-units($max-type-size)} - #{strip-units($min-type-size)}) * ((100vw - #{$start-fluid-width}) / (#{strip-units($stop-fluid-width)} - #{strip-units($start-fluid-width)})) );
}

@function strip-units($value) {
	@return $value / ($value * 0 + 1);
}

@function gutter($lines: 1, $value: $base-padding) {
	$gutter: strip-units($value);
	@if length($lines)==1 {
		@return rem(floor(($gutter * $lines) * 1px));
	} @else {
		@warn 'To many values used in gutter function';
		@return null;
	}
}

@function gridCalc($columns, $total-columns: $base-max-columns) {
	@return percentage($columns / $total-columns);
}

// colour functions
// Add percentage of white to a color
@function tint($color, $percent) {
	@return mix(white, $color, $percent);
}

// Add percentage of black to a color
@function shade($color, $percent) {
	@return mix(black, $color, $percent);
}


@function color($palette, $tone: 'base') {
	@return map-get(map-get($colors, $palette), $tone);
}

@function breakpoint($break) {
	@return map-get($breakpoints, $break);
}

@function rem-to-px($value, $context: $current-rootsize) {

    @if unit($value) == "rem" {
        $value : strip-units($value) * strip-units($current-rootsize);
        $value : $value * 1px;
    }
    @return $value;
}

@function rem($value, $context: $current-rootsize, $report: false) {
    @if $report == true {
        @debug $value $context;
    }
    @if unit($context) == "rem" {
        $context: rem-to-px($context);
    }
    @if unit($value) == "px" {
        $value : strip-units($value) / strip-units($context);
        $value : $value * 1rem;
    }
    @return $value;
}

@mixin svg($sprite) {
	$map: map-get($sprites, $sprite);
	background: url('../images/svg-sprite.svg') map-get($map, backgroundX) map-get($map, backgroundY) no-repeat;
	width: map-get($map, width);
	height: map-get($map, height);
}

@function ratio($x: 16, $y: 9) {
	@return percentage($y / $x);
}
